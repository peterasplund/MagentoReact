// =========
//  GLOBALS
// =========

/*
  [1] In my opinion, `position: relative` is a better default value than
      `position: static`, enabling top/right/bottom/left, and z-index values to
      work by default. Remember to set position: static to whatever element you
      want absolute elements to escape from.

  [2] Inherit box-sizing instead of setting the as the global default. This
      makes it easier to use 3rd party modules written with content-box.

  [3] I dislike it when the cursor changes on text hover. This makes all
      elements inherit "cursor: default" from the html element, then we reapply
      the correct cursor for buttons, inputs and anchor links later.

  [4] It's super annoying when the view changes and the new view has a different
      height so that the scroll bar pops in and out, so we display it at all
      times instead.

  [5] Reapply cursor: pointer to all anchor links as it was removed at [3]. This
      also covers anchor links without a [href] attribute so let it stay even if
      you remove the cursor override.

  [6] Elements with a tabindex are focusable, but don't have the subtle focus
      effects other focusable elements usually have. We remove the outline and
      reapply a focus effect manually where needed.

  [7] IE9 has a bug where source elements for pictures aren't respected unless
      they're wrapped with a video element. The actual element is added with
      conditional comments, this just ensures nothing is visible.
*/


*,
:before,
:after {
  position:   relative; /* [1] */
  box-sizing: inherit;  /* [2] */
  cursor:     inherit;  /* [3] */
}

html {
  height: 100%;
  cursor: default;
  box-sizing: border-box;
}

body {
  @extend %font-smoothing;
  display: flex;
  flex-direction: column;
  background: color("background");
  min-height: 100%;
  overflow-y: scroll; /* [4] */
  overflow-x: hidden;
  font: 200 #{font("size")}/1 font("body"), font("fallback");
  color: font("color");

      -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;

  @if (config("exportBreakpoints")) {
    &:before,
    &:after {
      display: none;
    }

    @each $size, $breakpoint in site("breakpoints") {
      &:before {
        @include mq($breakpoint) {
          content: $size;
        }
      }
    }

    &:after {
      content: quote(map-keys(site("breakpoints")));
    }
  }
}

a {
  @extend %transition;
  color: inherit;
  cursor: pointer; /* [5] */
  text-decoration: none;
  touch-action: manipulation;

  color: color("primary");
  font-weight: bold;

  &:focus {
    outline: 0;
  }
}

img {
  width: auto;
  height: auto;
  max-width: 100%;
  display: inline-block;
  vertical-align: middle;
}

[tabindex] {
  &:focus { /* [6] */
    outline: 0;
  }
}

fieldset {
  border: none;
  padding: 0;
  margin: 0;
}

picture {
  display: block;

  > video { /* [7] */
    display: none;
  }
}

strong, b {
  color: font("color--dark");
}

hr {
  width: size("text-block");
  margin: gr(2) auto;
  border-color: color("border--muted");
}

input {

  cursor: text;

  &:focus { /* [6] */
    outline: 0;
  }
}
