// =========
//  GLOBALS
// =========

/*
  [1] In my opinion, `position: relative` is a better default value than
      `position: static`, enabling top/right/bottom/left, and z-index values to
      work by default. Remember to set position: static to whatever element you
      want absolute elements to escape from.

  [2] Inherit box-sizing instead of setting the as the global default. This
      makes it easier to use 3rd party modules written with content-box.

  [3] I dislike it when the cursor changes on text hover. This makes all
      elements inherit "cursor: default" from the html element, then we reapply
      the correct cursor for buttons, inputs and anchor links later.

  [4] It's super annoying when the view changes and the new view has a different
      height so that the scroll bar pops in and out, so we display it at all
      times instead.

  [5] Reapply cursor: pointer to all anchor links as it was removed at [3]. This
      also covers anchor links without a [href] attribute so let it stay even if
      you remove the cursor override.

  [6] Elements with a tabindex are focusable, but don't have the subtle focus
      effects other focusable elements usually have. We remove the outline and
      reapply a focus effect manually where needed.

  [7] IE9 has a bug where source elements for pictures aren't respected unless
      they're wrapped with a video element. The actual element is added with
      conditional comments, this just ensures nothing is visible.
*/


*,
:before,
:after {
  position:   relative; /* [1] */
  box-sizing: inherit;  /* [2] */
  cursor:     inherit;  /* [3] */
}

html {
  height: 100%;
  cursor: default;
  box-sizing: border-box;
}

body {
  @extend %flex;
  @extend %flex-direction-column;
  @extend %font-smoothing;
  background: color("background");
  min-height: 100%;
  overflow-y: scroll; /* [4] */
  overflow-x: hidden;
  font: 200 #{font("size")}/1 font("body"), font("fallback");
  color: font("color");

      -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;

  @if (config("exportBreakpoints")) {
    &:before,
    &:after {
      display: none;
    }

    @each $size, $breakpoint in site("breakpoints") {
      &:before {
        @include mq($breakpoint) {
          content: $size;
        }
      }
    }

    &:after {
      content: quote(map-keys(site("breakpoints")));
    }
  }
}

a {
  @extend %transition;
  color: inherit;
  cursor: pointer; /* [5] */
  text-decoration: none;
  touch-action: manipulation;

  color: color("primary");
  font-weight: bold;

  &:focus {
    outline: 0;
  }
}

img {
  width: auto;
  height: auto;
  max-width: 100%;
  display: inline-block;
  vertical-align: middle;
}

[tabindex] {
  &:focus { /* [6] */
    outline: 0;
  }
}

fieldset {
  border: none;
  padding: 0;
  margin: 0;
}

picture {
  display: block;

  > video { /* [7] */
    display: none;
  }
}

strong, b {
  color: font("color--dark");
}

hr {
  width: size("text-block");
  margin: gr(2) auto;
  border-color: color("border--muted");
}

input {

  cursor: text;

  &:focus { /* [6] */
    outline: 0;
  }
}
.griddle td {
  border: 1px solid color('border--muted');
}
.parent-row {
  cursor: pointer;
  >td:first-child {
    padding-left: 2em;
    position: relative;
    &:before {
      content: "";
      position: absolute;
      display: block;
      transition: transform 0.2s transition("swift--in");
      transform: rotateX(0deg);

      width: 0;
      height: 0;
      border-bottom: 5px solid transparent;
      border-top: 5px solid transparent;
      border-left: 5px solid color("border");
      font-size: 0;
      line-height: 0;

      left: 10px;
      top: 16px;
    }
  }
  &.expanded>td:first-child:before {
    transform: rotateZ(90deg);
  }
}
.child-row td {
  background: #F7F7F7 !important;
}


// charts
.chart {
  position: static;

  svg {
    overflow: visible;
  }
}

.chart--stackedBar path.domain {
  display: none;
}

.chart--stackedBar {}

.chart-average-label {
  font-weight: bold;
  color: color("secondary");
  margin: 0;
}
.chart-my-label {
  font-weight: bold;
  color: color("primary");
  margin: 0;
}

.chart--pie {
  text-align: center;
}

.chart--area {
  .overlay {
    fill: none;
    pointer-events: all;
  }

  .focus circle {
    fill: none;
    stroke: steelblue;
  }

  margin-bottom: 3em;
}
.chart-tooltip {
  p {
    margin: 0;
  }

  &.reversed {
    left: -200px;
  }
}

.grid .tick {
    stroke: lightgrey;
    opacity: 0.7;
}
.grid path {
      stroke-width: 0;
}

//Tooltip shadow fallback
.cssfilters .chart-tooltip {
  filter: drop-shadow(0px 2px 2px rgba(0,0,0, 0.4));
  background-visibility: hidden;
}
.no-cssfilters .chart-tooltip {
  @include drop-shadow();
}

.griddle {
  overflow: visible;

  .parent-row>td:first-child>span {
    display: none;
  }

  table {
    position: relative;
  }
  tr, td {
    position: static;
  }
}
.griddle th {
  white-space: nowrap;
}
.griddle td {
  white-space: nowrap;
  @include mq(small) {
    white-space: normal;
  }
}


.griddle-previous, .griddle-page, .griddle-next {
  display: inline-block;
}
.griddle-previous {
  margin-right: 1em;
}
.griddle-next {
  margin-left: 1em;
}

@import './month-picker';

.month-picker {
  border: 1px solid #cccccc;
  display: inline-block;
  padding: 0.3em 1em;
  background: #fff;
  margin-left: 0.5em;
  vertical-align: top;
  height: 40px;
  line-height: 2em;

  &:focus {
    outline: none;
    border-color: color("primary", 50%);
  }
}


.select {
  vertical-align: top;
  -webkit-appearance: none;
  padding: 0 0.8em;
  padding-right: 2.6em;
  background: #fff;
  border-radius: 0px;
  border: 1px solid #cccccc;
  height: 40px;
  line-height: 40px;
  text-align: left;
  min-width: 90px;
  width: 100%;

  @media (max-width: breakpoints("small")) {
    font-size: 16px;
  }

  &__wrapper {
    display: inline-block;
    &:after {
      position: absolute;
      right: 15px;
      top: 16px;
      font-size: 0.7em;
      display: inline-block;
      content: '\25BC';
      pointer-events: none;
      color: color("border");
    }
  }

  &:focus {
    outline: none;
    border-color: color("primary", 50%);
  }
}



/* Base for label styling */
[type="checkbox"]:not(:checked),
[type="checkbox"]:checked {
  position: absolute;
  left: -9999px;
}
[type="checkbox"]:not(:checked) + label,
[type="checkbox"]:checked + label {
  position: relative;
  padding-left: 25px;
  cursor: pointer;
}

/* checkbox aspect */
[type="checkbox"]:not(:checked) + label:before,
[type="checkbox"]:checked + label:before {
  content: '';
  position: absolute;
  left:0; top: 2px;
  width: 17px;
  height: 17px;
  border: 1px solid #aaa;
  background: #f8f8f8;
  box-shadow: inset 0 1px 2px rgba(0,0,0,.2)
}
/* checked mark aspect */
[type="checkbox"]:not(:checked) + label:after,
[type="checkbox"]:checked + label:after {
  content: "";
  display: block;
  position: absolute;

  top: 7px; left: 5px;
  height: 8px;
  width: 8px;

  background: color("primary");

  transition: transform 0.2s transition("swift--in"),
              opacity 0.2s transition("swift--in");
}
/* checked mark aspect changes */
[type="checkbox"]:not(:checked) + label:after {
  opacity: 0;
  transform: scale(0.7);
}
[type="checkbox"]:checked + label:after {
  opacity: 1;
  transform: scale(1);
}
/* disabled checkbox */
[type="checkbox"]:disabled:not(:checked) + label:before,
[type="checkbox"]:disabled:checked + label:before {
  box-shadow: none;
  border-color: #bbb;
  background-color: #ddd;
}
[type="checkbox"]:disabled:checked + label:after {
  color: #999;
}
[type="checkbox"]:disabled + label {
  color: #aaa;
}

/* hover style just for information */
label:hover:before {
  border: 1px solid #4778d9;
}
