// ===========
//  FUNCTIONS
// ===========

////
/// @group Functions
/// @author Nils Kaspersson
////



// power of:
// ---------

/// Returns the power of any number.
/// @param $base - The base.
/// @param $exp - The exponential.

@function pow($base, $exp) {
  $value: $base;

  @if $exp > 1 {
    @for $i from 2 through $exp {
      $value: $value * $base;
    }
  }

  @if $exp < 1 {
    @for $i from 0 through -$exp {
      $value: $value / $base;
    }
  }

  @return $value;
}



// golden ratio:
// -------------

/// Return the growth factor of the golden ratio
///
/// @param $exp - The exponential.
/// @param $unit [1em] - Which unit to use as output. Note that 1x of the unit must be added.
/// @param $split [1] - Divide the result by X.
///
/// @example scss
/// .element {
///   padding: gr(1);
/// }
///
/// @example css
/// /* Generated CSS: */
/// .element {
///   padding: 1.618em;
/// }

@function gr($exp, $unit: 1em, $split: 1) {
  @if $unit != null {
    @return pow(1.618, $exp) / $split * $unit;
  }

  @else {
    @return pow(1.618, $exp) / $split;
  }
}



/// Fetch maps within maps
/// @author Hugo Giraudel
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}



/// Checks if a map contains a key, and if it does, returns it. Otherwise it returns the `$fallback`.
///
/// @param $map - Any map
/// @param $key - Desired key
/// @param $fallback - Value that should be returned if key doesn't exist

@function if-map($map, $key, $fallback) {
  @return if(map-has-key($map, $key), map-get($map, $key), $fallback);
}




/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(#000, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 (-$primary-offset) $blur $color;
}



/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(#000, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}




// Gives a card depth effect.
// @param {Number} $depth - depth level (between 1 and 5)
// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
// @requires {function} top-shadow
// @requires {function} bottom-shadow
@mixin drop-shadow($depth: 1) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `item`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}



/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}




@function add-unit($number, $unit) {
  @return $number * (1#{$unit});
}
